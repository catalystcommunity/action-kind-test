name: 'Kind Test'
description: 'Creates a kind cluster, installs helm charts, runs an app via skaffold, and runs tests'
inputs:
  token:
    description: 'Github token, if there are dependencies, this should be a PAT so that the other repos can be cloned'
    required: false
    default: ${{ github.token }}
  ref:
    description: 'Git ref to use'
    required: false
    default: ${{ github.ref }}
  test-command:
    description: 'What test command to run'
    required: false
    default: 'go test'
  test-working-directory:
    description: 'Directory to run tests from'
    required: false
    default: 'test'
  wait-for-ports:
    description: 'Ports to wait for, used for dependent charts, if those charts need exposed local ports as part of testing. Comma separated list such as `8000,8001`'
    required: false
    default: ''
  max-wait:
    description: 'Max time in milliseconds to wait for readiness on ports set in `wait-for-ports`'
    required: false
    default: 300000
  check-interval:
    description: 'Interval to check readiness on ports set in `wait-for-ports`'
    required: false
    default: 5000
  helm-charts:
    description: 'Helm charts to install, a json formatted string, that is a list of objects'
    required: false
    default: '[]'
  credentials-json:
    description: 'Gcloud service account credentials json. This is required if you are installing helm charts'
    required: false
  project-id:
    description: 'gcloud project id. This is required if you are installing helm charts'
    required: false
  region:
    description: 'artifact registry region'
    required: false
    default: 'us-west1'
  repository:
    description: 'artifact registry repository'
    required: false
    default: 'charts'
  helm-install-wait-timeout:
    description: 'How long to wait for installed charts to be healthy before failing'
    required: false
    default: 3m
  dependencies:
    description: 'Other git repos in this organization to clone and run skaffold for. Should be a comma separated list of short repository names, excluding the organization'
    required: false
    default: ''
  sleep:
    description: 'Seconds to sleep before running tests'
    required: false
    default: 10
  add-private-helm-repo:
    description: 'set to true to add a private helm repo'
    required: false
    default: false
  helm-repo-name:
    description: 'Helm repository name to add'
    required: false
    default: ${{ github.repository_owner }}
  helm-repo-url:
    description: 'Helm repository url'
    required: false
    default: 'https://raw.githubusercontent.com/${{ github.repository_owner }}/charts/main'
  helm-repo-username:
    description: 'Helm repository username'
    required: false
    default: ''
  helm-repo-password:
    description: 'Helm repository password'
    required: false
    default: ''
  fail-stern-commands:
    description: 'Newline separated list, when tests fail these stern commands are run so you can see container logs'
    required: false
    default: ''
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.20.x'
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ inputs.token }}
        ref: ${{ inputs.ref }}
        path: app
    - name: Install stern
      shell: bash
      run: |
        mkdir ${GITHUB_WORKSPACE}/stern
        cd ${GITHUB_WORKSPACE}/stern
        wget -q https://github.com/stern/stern/releases/download/v1.22.0/stern_1.22.0_linux_amd64.tar.gz
        tar xzvf stern_1.22.0_linux_amd64.tar.gz
        rm stern_1.22.0_linux_amd64.tar.gz LICENSE
        echo "${GITHUB_WORKSPACE}/stern" >> $GITHUB_PATH
    - name: Setup Go
      if: hashFiles('app/go.mod') != '' # rudimentary file existence check
      uses: actions/setup-go@v2
      with:
        go-version: ${{ inputs.go-version }}
    - name: Setup Go Cache
      if: hashFiles('app/go.mod') != '' # rudimentary file existence check
      uses: actions/cache@v2
      with:
        # * Module download cache
        # * Build cache (Linux)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Setup skaffold cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.skaffold/cache
        key: ${{ runner.os }}-skaffold-${{ hashFiles('**/skaffold.yaml') }}
        restore-keys: |
          ${{ runner.os }}-skaffold-
    - name: Setup tools
      uses: yokawasa/action-setup-kube-tools@v0.7.1
      with:
        helm: '3.7.2'
        skaffold: '1.35.0'
    - name: Add helm repository
      if: inputs.add-private-helm-repo == 'true'
      shell: bash
      run: |
        helm repo add ${{ inputs.helm-repo-name}} ${{ inputs.helm-repo-url}} --username ${{ inputs.helm-repo-username }} --password ${{ inputs.helm-repo-password }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1.6.0
    - if: inputs.credentials-json != ''
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ inputs.credentials-json }}
    - if: inputs.credentials-json != ''
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ inputs.credentials-json }}
    - if: inputs.credentials-json != ''
      name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v0.3.0
      with:
        project_id: ${{ inputs.project-id }}
    - if: inputs.credentials-json != ''
      name: Auth docker to gcloud
      shell: bash
      run: |
        gcloud auth configure-docker ${{ inputs.region }}-docker.pkg.dev
    - name: Setup private repo access and skafold logs
      shell: bash
      run: |
        git config --global url."https://${{ inputs.token }}@github.com".insteadOf "https://github.com"
        mkdir ${GITHUB_WORKSPACE}/skaffold-logs
    - name: Create Kind cluster
      uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"
    - name: Run Dependencies
      if: inputs.dependencies != ''
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        HELM_EXPERIMENTAL_OCI: 1
      shell: bash
      run: ${{ github.action_path }}/run-dependencies.sh ${{ inputs.dependencies }}
    - name: Run app via skaffold
      env:
        SKAFFOLD_ACTIONS: true
        HELM_EXPERIMENTAL_OCI: 1
      shell: bash
      working-directory: app
      run: |
        skaffold run --tail --port-forward=user --verbosity=info > ${GITHUB_WORKSPACE}/skaffold-logs/app.txt &
    - name: Wait for ready
      if: inputs.wait-for-ports != ''
      uses: catalystsquad/action-wait-for-ports@v1
      with:
        ports: ${{ inputs.wait-for-ports }}
        max-wait: ${{ inputs.max-wait }}
        check-interval: ${{ inputs.check-interval }}
    - name: Run tests
      shell: bash
      working-directory: app/${{ inputs.test-working-directory }}
      run: |
        sleep ${{ inputs.sleep }}
        ${{ inputs.test-command }}
    - name: Report status on failure
      if: failure()
      shell: bash
      run: |
        kubectl get all --all-namespaces
        kubectl describe pods --all-namespaces
        for i in ${GITHUB_WORKSPACE}/skaffold-logs/*.txt
        do
          echo "logs for $i"
          cat $i
        done
    - name: Run stern commands on failure
      if: failure()
      shell: bash
      run: ${{ github.action_path }}/run-stern-commands.sh "${{ inputs.fail-stern-commands }}"
